function ThreeBSPfactory(){var f,b=0.00001,d=0,c=1,e=2,a=3;f=function(q,k,g){var m,t,p,o,s,r=[],u;if(q instanceof THREE.Geometry){this.matrix=null}else{if(q instanceof THREE.Mesh){q.updateMatrix();k=this.matrix=q.matrix.clone();q=q.geometry}else{if(q instanceof f.Node){this.tree=q;this.matrix=null;return this}else{if(q instanceof THREE.BufferGeometry){var h=q.getAttribute("position").array,l=q.getAttribute("normal").array;for(var m=0;m<h.length;m+=9){s=new f.Polygon;o=new f.Vertex(h[m],h[m+1],h[m+2],l[m],l[m+1],l[m+2]);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=new f.Vertex(h[m+3],h[m+4],h[m+5],l[m+3],l[m+4],l[m+5]);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=new f.Vertex(h[m+6],h[m+7],h[m+8],l[m+6],l[m+7],l[m+8]);if(k){o.applyMatrix4(k)}s.vertices.push(o);s.calculateProperties();r.push(s)}this.tree=new f.Node(r,g);if(g!==undefined){this.maxid=this.tree.maxnodeid}return this}else{if(q.polygons&&(q.polygons[0] instanceof f.Polygon)){r=q.polygons;for(var m=0;m<r.length;++m){var s=r[m];if(k){for(var j=0;j<s.vertices.length;++j){s.vertices[j].applyMatrix4(k)}}s.calculateProperties()}this.tree=new f.Node(r,g);if(g!==undefined){this.maxid=this.tree.maxnodeid}return this}else{throw"ThreeBSP: Given geometry is unsupported"}}}}}for(m=0,t=q.faces.length;m<t;++m){p=q.faces[m];s=new f.Polygon;if(p instanceof THREE.Face3){o=q.vertices[p.a];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[0].x,p.vertexNormals[0].y,p.vertexNormals[0].z);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=q.vertices[p.b];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[1].x,p.vertexNormals[1].y,p.vertexNormals[1].z);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=q.vertices[p.c];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[2].x,p.vertexNormals[2].y,p.vertexNormals[2].z);if(k){o.applyMatrix4(k)}s.vertices.push(o)}else{if(typeof THREE.Face4){o=q.vertices[p.a];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[0].x,p.vertexNormals[0].y,p.vertexNormals[0].z);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=q.vertices[p.b];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[1].x,p.vertexNormals[1].y,p.vertexNormals[1].z);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=q.vertices[p.c];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[2].x,p.vertexNormals[2].y,p.vertexNormals[2].z);if(k){o.applyMatrix4(k)}s.vertices.push(o);o=q.vertices[p.d];o=new f.Vertex(o.x,o.y,o.z,p.vertexNormals[3].x,p.vertexNormals[3].y,p.vertexNormals[3].z);if(k){o.applyMatrix4(k)}s.vertices.push(o)}else{throw"Invalid face type at index "+m}}s.calculateProperties();r.push(s)}this.tree=new f.Node(r,g);if(g!==undefined){this.maxid=this.tree.maxnodeid}};f.prototype.subtract=function(h){var i=this.tree.clone(),g=h.tree.clone();i.invert();i.clipTo(g);g.clipTo(i);g.invert();g.clipTo(i);g.invert();i.build(g.allPolygons());i.invert();i=new f(i);i.matrix=this.matrix;return i};f.prototype.union=function(h){var i=this.tree.clone(),g=h.tree.clone();i.clipTo(g);g.clipTo(i);g.invert();g.clipTo(i);g.invert();i.build(g.allPolygons());i=new f(i);i.matrix=this.matrix;return i};f.prototype.intersect=function(h){var i=this.tree.clone(),g=h.tree.clone();i.invert();g.clipTo(i);g.invert();i.clipTo(g);g.clipTo(i);i.build(g.allPolygons());i.invert();i=new f(i);i.matrix=this.matrix;return i};f.prototype.tryToCompress=function(r){if(this.maxid===undefined){return}var m=[],l,i,o=0,h,q=r.length,g,t,s,k,j;for(h=0;h<q;++h){g=r[h];if(g.id===undefined){continue}if(m[g.id]===undefined){m[g.id]=[]}m[g.id].push(g)}for(h=0;h<m.length;++h){l=m[h];if(l===undefined){continue}q=l.length;i=(q>1);while(i){i=false;for(k=0;k<q-1;++k){t=l[k];if(!t||!t.parent){continue}for(j=k+1;j<q;++j){s=l[j];if(s&&(t.parent===s.parent)&&(t.nsign===s.nsign)){if(t.nsign!==t.parent.nsign){t.parent.flip()}o++;l[k]=t.parent;l[j]=null;if(t.parent.vertices.length<3){console.log("something wrong with parent")}i=true;break}}}}}if(o>0){r.splice(0,r.length);for(h=0;h<m.length;++h){l=m[h];if(l!==undefined){for(k=0,q=l.length;k<q;++k){if(l[k]){r.push(l[k])}}}}}};f.prototype.direct_subtract=function(h){var i=this.tree,g=h.tree;i.invert();i.clipTo(g);g.clipTo(i);g.invert();g.clipTo(i);g.invert();i.build(g.collectPolygons([]));i.invert();return this};f.prototype.direct_union=function(h){var i=this.tree,g=h.tree;i.clipTo(g);g.clipTo(i);g.invert();g.clipTo(i);g.invert();i.build(g.collectPolygons([]));return this};f.prototype.direct_intersect=function(h){var i=this.tree,g=h.tree;i.invert();g.clipTo(i);g.invert();i.clipTo(g);g.clipTo(i);i.build(g.collectPolygons([]));i.invert();return this};f.prototype.toGeometry=function(){var l,k,t=this.matrix?new THREE.Matrix4().getInverse(this.matrix):null,q=new THREE.Geometry(),u=this.tree.collectPolygons([]),h=u.length,s,g,v={},r,p,o,m,n;for(l=0;l<h;++l){s=u[l];g=s.vertices.length;for(k=2;k<g;++k){m=s.vertices[0];m=new THREE.Vector3(m.x,m.y,m.z);if(t){m.applyMatrix4(t)}if(typeof v[m.x+","+m.y+","+m.z]!=="undefined"){r=v[m.x+","+m.y+","+m.z]}else{q.vertices.push(m);r=v[m.x+","+m.y+","+m.z]=q.vertices.length-1}m=s.vertices[k-1];m=new THREE.Vector3(m.x,m.y,m.z);if(t){m.applyMatrix4(t)}if(typeof v[m.x+","+m.y+","+m.z]!=="undefined"){p=v[m.x+","+m.y+","+m.z]}else{q.vertices.push(m);p=v[m.x+","+m.y+","+m.z]=q.vertices.length-1}m=s.vertices[k];m=new THREE.Vector3(m.x,m.y,m.z);if(t){m.applyMatrix4(t)}if(typeof v[m.x+","+m.y+","+m.z]!=="undefined"){o=v[m.x+","+m.y+","+m.z]}else{q.vertices.push(m);o=v[m.x+","+m.y+","+m.z]=q.vertices.length-1}n=new THREE.Face3(r,p,o,new THREE.Vector3(s.normal.x,s.normal.y,s.normal.z));q.faces.push(n)}}return q};f.prototype.toPolygons=function(){var g=this.tree.collectPolygons([]);this.tryToCompress(g);for(var h=0;h<g.length;++h){delete g[h].id;delete g[h].parent}return g};f.prototype.toBufferGeometry=function(){var k,h,r=this.toPolygons(),g=r.length,s=0;for(k=0;k<g;++k){s+=(r[k].vertices.length-2)*9}var l=new Float32Array(s),m=new Float32Array(s),o=0,q;function p(i){l[o]=i.x;l[o+1]=i.y;l[o+2]=i.z;m[o]=q.nsign*i.nx;m[o+1]=q.nsign*i.ny;m[o+2]=q.nsign*i.nz;o+=3}for(k=0;k<g;++k){q=r[k];for(h=2;h<q.vertices.length;++h){p(q.vertices[0]);p(q.vertices[h-1]);p(q.vertices[h])}}var n=new THREE.BufferGeometry();n.addAttribute("position",new THREE.BufferAttribute(l,3));n.addAttribute("normal",new THREE.BufferAttribute(m,3));return n};f.prototype.toMesh=function(g){var h=this.toGeometry(),i=new THREE.Mesh(h,g);if(this.matrix){i.position.setFromMatrixPosition(this.matrix);i.rotation.setFromRotationMatrix(this.matrix)}return i};f.Polygon=function(h,i,g){if(!(h instanceof Array)){h=[]}this.vertices=h;this.nsign=1;if(h.length>0){this.calculateProperties()}else{this.normal=this.w=undefined}};f.Polygon.prototype.copyProperties=function(h,g){this.normal=h.normal;this.w=h.w;this.nsign=h.nsign;if(g&&(h.id!==undefined)){this.id=h.id;this.parent=h}return this};f.Polygon.prototype.calculateProperties=function(){if(this.normal){return}var h=this.vertices[0],g=this.vertices[1],i=this.vertices[2];this.nsign=1;this.normal=g.clone().subtract(h).cross(i.clone().subtract(h)).normalize();this.w=this.normal.clone().dot(h);return this};f.Polygon.prototype.clone=function(){var j,g,h=new f.Polygon;for(j=0,g=this.vertices.length;j<g;++j){h.vertices.push(this.vertices[j].clone())}return h.copyProperties(this)};f.Polygon.prototype.flip=function(){this.nsign*=-1;this.vertices.reverse();return this};f.Polygon.prototype.classifyVertex=function(g){var h=this.nsign*(this.normal.dot(g)-this.w);if(h<-b){return e}else{if(h>b){return c}else{return d}}};f.Polygon.prototype.classifySide=function(k){var j,l,m=0,h=0,g=k.vertices.length;for(j=0;j<g;++j){l=this.classifyVertex(k.vertices[j]);if(l===c){++m}else{if(l===e){++h}}}if(m>0&&h===0){return c}else{if(m===0&&h>0){return e}else{if(m===0&&h===0){return d}else{return a}}}};f.Polygon.prototype.splitPolygon=function(o,z,m,l,q){var g=this.classifySide(o);if(g===d){((this.nsign*o.nsign*this.normal.dot(o.normal)>0)?z:m).push(o)}else{if(g===c){l.push(o)}else{if(g===e){q.push(o)}else{var D=o.vertices.length,u=this.normal.x,s=this.normal.y,r=this.normal.z,x,w,k,h,C,B,p,n,y=[],A=[];for(x=0;x<D;++x){w=(x+1)%D;C=o.vertices[x];B=o.vertices[w];k=this.classifyVertex(C);h=this.classifyVertex(B);if(k!=e){y.push(C)}if(k!=c){A.push(C)}if((k|h)===a){p=(this.w-(u*C.x+s*C.y+r*C.z))/(u*(B.x-C.x)+s*(B.y-C.y)+r*(B.z-C.z));n=C.interpolate(B,p);y.push(n);A.push(n)}}if(y.length>=3){l.push(new f.Polygon(y).copyProperties(o,true))}if(A.length>=3){q.push(new f.Polygon(A).copyProperties(o,true))}}}}};f.Vertex=function(h,l,j,g,k,i){this.x=h;this.y=l;this.z=j;this.nx=g;this.ny=k;this.nz=i};f.Vertex.prototype.setnormal=function(g,i,h){this.nx=g;this.ny=i;this.nz=h};f.Vertex.prototype.clone=function(){return new f.Vertex(this.x,this.y,this.z,this.nx,this.ny,this.nz)};f.Vertex.prototype.add=function(g){this.x+=g.x;this.y+=g.y;this.z+=g.z;return this};f.Vertex.prototype.subtract=function(g){this.x-=g.x;this.y-=g.y;this.z-=g.z;return this};f.Vertex.prototype.multiplyScalar=function(g){this.x*=g;this.y*=g;this.z*=g;return this};f.Vertex.prototype.cross=function(h){var g=this.x,j=this.y,i=this.z;this.x=j*h.z-i*h.y;this.y=i*h.x-g*h.z;this.z=g*h.y-j*h.x;return this};f.Vertex.prototype.normalize=function(){var g=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);this.x/=g;this.y/=g;this.z/=g;return this};f.Vertex.prototype.dot=function(g){return this.x*g.x+this.y*g.y+this.z*g.z};f.Vertex.prototype.diff=function(k){var j=(this.x-k.x),h=(this.y-k.y),g=(this.z-k.z),i=this.x*this.x+this.y*this.y+this.z*this.z;return(j*j+h*h+g*g)/(i>0?i:1e-10)};f.Vertex.prototype.interpolate=function(g,h){var i=1-h;return new f.Vertex(this.x*i+g.x*h,this.y*i+g.y*h,this.z*i+g.z*h,this.nx*i+g.nx*h,this.ny*i+g.ny*h,this.nz*i+g.nz*h)};f.Vertex.prototype.applyMatrix4=function(h){var g=this.x,k=this.y,j=this.z,i=h.elements;this.x=i[0]*g+i[4]*k+i[8]*j+i[12];this.y=i[1]*g+i[5]*k+i[9]*j+i[13];this.z=i[2]*g+i[6]*k+i[10]*j+i[14];g=this.nx;k=this.ny;j=this.nz;this.nx=i[0]*g+i[4]*k+i[8]*j;this.ny=i[1]*g+i[5]*k+i[9]*j;this.nz=i[2]*g+i[6]*k+i[10]*j;return this};f.Node=function(g,l){var j,m,k=[],h=[];this.polygons=[];this.front=this.back=undefined;if(!(g instanceof Array)||g.length===0){return}this.divider=g[0].clone();for(j=0,m=g.length;j<m;++j){if(l!==undefined){g[j].id=l++;delete g[j].parent}this.divider.splitPolygon(g[j],this.polygons,this.polygons,k,h)}if(l!==undefined){this.maxnodeid=l}if(k.length>0){this.front=new f.Node(k)}if(h.length>0){this.back=new f.Node(h)}};f.Node.isConvex=function(h){var l,k,g=h.length;for(l=0;l<g;++l){for(k=0;k<g;++k){if(l!==k&&h[l].classifySide(h[k])!==e){return false}}}return true};f.Node.prototype.build=function(g){var j,l,k=[],h=[];if(!this.divider){this.divider=g[0].clone()}for(j=0,l=g.length;j<l;++j){this.divider.splitPolygon(g[j],this.polygons,this.polygons,k,h)}if(k.length>0){if(!this.front){this.front=new f.Node()}this.front.build(k)}if(h.length>0){if(!this.back){this.back=new f.Node()}this.back.build(h)}};f.Node.prototype.collectPolygons=function(h){var j,g=this.polygons.length;for(j=0;j<g;++j){h.push(this.polygons[j])}if(this.front){this.front.collectPolygons(h)}if(this.back){this.back.collectPolygons(h)}return h};f.Node.prototype.allPolygons=function(){var g=this.polygons.slice();if(this.front){g=g.concat(this.front.allPolygons())}if(this.back){g=g.concat(this.back.allPolygons())}return g};f.Node.prototype.numPolygons=function(){var g=this.polygons.length;if(this.front){g+=this.front.numPolygons()}if(this.back){g+=this.back.numPolygons()}return g};f.Node.prototype.clone=function(){var g=new f.Node();g.divider=this.divider.clone();g.polygons=this.polygons.map(function(h){return h.clone()});g.front=this.front&&this.front.clone();g.back=this.back&&this.back.clone();return g};f.Node.prototype.invert=function(){var h,j,g;for(h=0,j=this.polygons.length;h<j;++h){this.polygons[h].flip()}this.divider.flip();if(this.front){this.front.invert()}if(this.back){this.back.invert()}g=this.front;this.front=this.back;this.back=g;return this};f.Node.prototype.clipPolygons=function(g){var j,l,k,h;if(!this.divider){return g.slice()}k=[],h=[];for(j=0,l=g.length;j<l;++j){this.divider.splitPolygon(g[j],k,h,k,h)}if(this.front){k=this.front.clipPolygons(k)}if(this.back){h=this.back.clipPolygons(h)}else{h=[]}return k.concat(h)};f.Node.prototype.clipTo=function(g){this.polygons=g.clipPolygons(this.polygons);if(this.front){this.front.clipTo(g)}if(this.back){this.back.clipTo(g)}};return f}if((typeof document!=="undefined")&&(typeof window!=="undefined")){window.ThreeBSP=ThreeBSPfactory()}else{ThreeBSP=ThreeBSPfactory()};